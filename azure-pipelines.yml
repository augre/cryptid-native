trigger:
- master

pool:
  vmImage: 'ubuntu-18.04'

steps:
- task: UseNode@1
  displayName: 'Ensure Node.js'
  inputs:
    version: '12.x'

- bash: |
    sudo apt install -y \
      lcov \
      valgrind \
      libgmp-dev \
      gawk \
      default-jdk \
      wget
  displayName: 'Setup necessary packages'

- bash: './task.sh test --coverage'
  displayName: 'Run tests'

- task: PublishTestResults@2
  displayName: 'Publish test results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'test-results/*.xml'

- bash: './task.sh memcheck --xmlOutput'
  displayName: 'Check for memory leaks'

- task: PublishBuildArtifacts@1
  displayName: 'Publish memcheck XML output'
  condition: succeededOrFailed()
  inputs:
    pathToPublish: 'memcheck-xml'
    artifactName: 'memcheck-xml'

- bash: |
    wget https://pkg.githubusercontent.com/237624794/974f4180-4616-11ea-844a-0d4166620c62?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20200202%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20200202T234946Z&X-Amz-Expires=300&X-Amz-Signature=ab6806dd2379743bb53fb83fb9bfc476f0626753cf7c6e01182c1205d6e74953&X-Amz-SignedHeaders=host&actor_id=0&response-content-disposition=filename%3Dparsegrind-1.0.2.jar&response-content-type=application%2Foctet-stream
    java -jar parsegrind-1.0.1.jar \
      --source-glob=**/*.c \
      --valgrind-glob=memcheck/*.memcheck.xml \
      --output=memcheck/memcheck.html \
  displayName: 'Run parsegrind'
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
    displayName: 'Publish parsegrind HTML output'
    condition: succeededOrFailed()
    inputs:
      pathToPublish: 'memcheck.html'
      artifactName: 'memcheck-html'

- bash: './task.sh report-coverage'
  displayName: 'Upload coverage to Coveralls'
  env:
    # Clearly a hack, I should submit a PR to node-coveralls, but
    # I want this up and running now :)
    CI: true
    CI_NAME: codeship
    COVERALLS_SERVICE_NAME: azure-pipelines
    CI_BUILD_NUMBER: $(Build.BuildNumber)
    CI_COMMIT_ID: $(Build.SourceVersion)
    CI_BRANCH: $(Build.SourceBranchName)
    CI_COMMITTER_EMAIL: $(Build.RequestedForEmail)
    CI_COMMITTER_NAME: $(Build.RequestedFor)
    CI_COMMIT_MESSAGE: $(Build.SourceVersionMessage)
    CI_BUILD_URL: $(Build.BuildUri)
    COVERALLS_REPO_TOKEN: $(CoverallsRepoToken)
